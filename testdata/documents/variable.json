{
  "id": 0,
  "title": "変数",
  "tags": [
    "basic", "syntax", "typescript"
  ],
  "content": "変数\nTypeScriptとJavaScriptの一番の違いは型です。型が登場する場面は主に3つです。\n\n変数(プロパティも含む)\n\n関数の引数\n\n関数の返り値\n\n本章ではまず変数について触れ、TypeScriptの型システムの一部を紹介します。\n\n関数については関数の章で説明します。 型システムの他の詳細については、オブジェクトの型付け（インタフェースの章）、クラスの型付け（クラスの章）、既存パッケージへの型付けの各章で説明します。\n\n三種類の宣言構文\n変数宣言には const 、 let があります。 constをまず使うことを検討してください。 変数は全部とりあえずconstで宣言し、再代入がどうしても必要なところだけletにします。 変わる必要がないものは「もう変わらない」と宣言することで、状態の数が減ってコードの複雑さが減り、理解しやすくなります。 変数を変更する場合はletを使います。 なお、このconstは、多くのC/C++経験者を悩ませたオブジェクトの不変性には関与しないため、再代入はできませんがconstで宣言した変数に格納された配列に要素を追加したり、オブジェクトの属性変更はできます。 そのため、使える場所はかなり広いです。\n\n変数の使い方\n// 何はともあれconst\nconst name = \"小動物\";\n\n// 変更がある変数はlet\n// 三項演算子を使えばconstにもできる\nlet name;\nif (mode === \"slack\") {\n    name = \"小型犬\";\n} else if (mode === \"twitter\") {\n    name = \"小動物\";\n}\nなお、JavaScriptと異なり、未定義の変数に代入すると、エラーなります。\n\nundefinedVar = 10;\n// error TS2552: Cannot find name 'undefinedVar'.\n若者であれば記憶力は強いので良いですが、歳をとるとだんだん弱ってくるのです。また、若くても二日酔いの時もあるでしょうし、風邪ひいたり疲れている時もあると思うので、頑張らないで理解できるように常にしておくのは意味があります。\n\n注釈\n昔のJavaScriptは変数宣言で使えるのはvarのみでした。 var はスコープが関数の単位とやや広く、影響範囲が必要以上に広くなります。 また、宣言文の前にアクセスしてもエラーにならなかったりと、他の宣言よりも安全性が劣ります。 現在でも使えますが、積極的に使うことはないでしょう。\n\n変数の使い方\n// 古い書き方\nvar name = \"小動物\";\n変数の型定義\nTypeScriptは変数に型があります。TypeScriptは変数名の後ろに後置で型を書きます。これはGo、Rust、Python3などでみられます。 一度定義すると、別の型のデータを入れると、コンパイラがエラーを出します。それによってプログラムのミスが簡単に見つかります。 また、型が固定されると、Visual Studio Codeなどのエディタでコード補完機能が完璧に利用できます。\n\n変数への型の定義\n// nameは文字列型\nlet name: string;\n\n// 違う型のデータを入れるとエラー\n// error TS2322: Type '123' is not assignable to type 'string'\nname = 123;\nなお、代入の場合には右辺のデータ型が自動で設定されます。これは型推論と呼ばれる機能で、これのおかげで、メソッドの引数や、クラスや構造体のフィールド以外の多くの場所で型を省略できます。\n\n推論\n// 代入時に代入元のデータから型が類推できる場合は自動設定される\n// 右辺から文字列とわかるので文字列型\nlet title = \"小説家\";\n\n// 代入もせず、型定義もないと、なんでも入る（推論ができない）any型になります。\nlet address;\n// 明示的に any を指定することもできる\nlet address: any;\n型については型の章で取り上げます。 変数以外にも関数の引数でも同様に型を定義できますが、これについては関数の節で紹介します。\n\nより柔軟な型定義\nTypeScriptは、JavaやC++、Goなどの型付き言語を使ったことがある人からすると、少し違和感を感じるかもしれない柔軟な型システムを持っています。 これは、型システムが単にプログラミングのサポートの機能しかなく、静的なメモリ配置まで面倒を見るような言語では不正となるようなコードを書いても問題がないからと言えるでしょう。 2つほど柔軟な機能を紹介します。\n\nAでもBでも良い、という柔軟な型が定義できる\n\n値も型システムで扱える\n\nAでもBでも良い、というのは例えば数値と文字列の両方を受け取れる（が、他のデータは拒否する）という指定です。\n\n数字でも文字列でも受け取れる変数\n// 生まれの年は数字か文字列\nlet birthYear: number | string;\n\n// 正常\nbirthYear = 1980;\n// これも正常\nbirthYear = '昭和';\n// 答えたくないのでnull・・・はエラー\nbirthYear = null;\n// error TS2322: Type 'null' is not assignable to type 'string | number'.\n次のコードは、変数に入れられる値を特定の文字列に限定する機能です。 型は | で複数並べることができる機能を使って、取りうる値を列挙しています。 この複数の状態を取る型をUnion Typeと呼びます。 ここで書いていない文字列を代入しようとするとエラーになります。 数値にも使えます。\n\n変数に特定の文字列しか設定できないようにする\nlet favoriteFood: \"北極\" | \"冷やし味噌\";\nfavoriteFood = \"味噌タンメン\"\n// error TS2322: Type '\"味噌タンメン\"' is not assignable to\n//   type '\"北極\" | \"冷やし味噌\"'.\n\n// 数値も設定可能\ntype PointRate = 8 | 10 | 20;\n// これもエラーに\nlet point: PointRate = 12;\n型と値を組み合わせることもできます。\n\n// 値と型のUnion Type\nlet birthYear: number | \"昭和\" | \"平成\";\nbirthYear = \"昭和\";\n変数の巻き上げ\nvar、const、let では変数の巻き上げの挙動が多少異なります。 var はスコープ内で宣言文の前では、変数はあるが初期化はされてない（ undefined ）になりますが、他の2つはコンパイルエラーになります。 宣言前に触るのは行儀が良いとは言えないため、 const の挙動の方が適切でしょう。\n\n変数の巻き上げ（変数の存在するスコープの宣言行前の挙動）\n// 旧: varはundefinedになる\nfunction oldFunction() {\n  console.log(`巻き上げのテスト ${v}`);\n  var v = \"小公女\";\n  // undefinedが入っている変数がある扱いになり、エラーならず\n}\noldFunction();\n\n// 新: let/const\nfunction letFunction() {\n  console.log(`巻き上げのテスト ${v}`);\n  let v = \"小公女\";\n  // 宣言より前ではエラー\n  // error TS2448: Block-scoped variable 'v' used before its declaration.\n}\nletFunction();\n変数のスコープ\n以前は{、}は制御構文のためのブロックでしかなく、var変数は宣言されたfunctionのどこからでもアクセスできました。 let、constで宣言した変数のスコープは宣言されたブロック（if、forは条件式部分も含む）の中に限定されます。 スコープが狭くなると、同時に把握すべき状態が減るため、コードが理解しやすくなります。\n\n// 古いコード\nfor (var i = 0; i < 10; i++) {\n  // do something\n}\nconsole.log(i); // -> 10\n\n// 新しいコード\nfor (let i = 0; i < 10; i++) {\n  // do something\n}\nconsole.log(i);\n// error TS2304: Cannot find name 'i'.\nなお、スコープはかならずしも制御構文である必要はなく、{、}だけを使うこともできます。\n\nfunction code() {\n  {\n    //この変数はこの中でのみ有効\n    const store = \"小売店\";\n  }\n}\nまとめ\n本章では、TypeScriptの入り口となる変数について紹介しました。 昔のJavaScriptとはやや趣向が変わっているところもありますが、新しい let 、 const を使うことで、変数のスコープをせばめ、理解しやすいコードになります。"
}