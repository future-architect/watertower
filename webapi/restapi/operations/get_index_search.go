// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/future-architect/watertower/webapi/models"
)

// GetIndexSearchHandlerFunc turns a function with the right signature into a get index search handler
type GetIndexSearchHandlerFunc func(GetIndexSearchParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetIndexSearchHandlerFunc) Handle(params GetIndexSearchParams) middleware.Responder {
	return fn(params)
}

// GetIndexSearchHandler interface for that can handle valid get index search params
type GetIndexSearchHandler interface {
	Handle(GetIndexSearchParams) middleware.Responder
}

// NewGetIndexSearch creates a new http.Handler for the get index search operation
func NewGetIndexSearch(ctx *middleware.Context, handler GetIndexSearchHandler) *GetIndexSearch {
	return &GetIndexSearch{Context: ctx, Handler: handler}
}

/*GetIndexSearch swagger:route GET /{index}/_search getIndexSearch

Your GET endpoint

*/
type GetIndexSearch struct {
	Context *middleware.Context
	Handler GetIndexSearchHandler
}

func (o *GetIndexSearch) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetIndexSearchParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetIndexSearchBadRequestBody get index search bad request body
//
// swagger:model GetIndexSearchBadRequestBody
type GetIndexSearchBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get index search bad request body
func (o *GetIndexSearchBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetIndexSearchBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetIndexSearchBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetIndexSearchBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetIndexSearchBody get index search body
//
// swagger:model GetIndexSearchBody
type GetIndexSearchBody struct {

	// query
	// Required: true
	Query *GetIndexSearchParamsBodyQuery `json:"query"`
}

// Validate validates this get index search body
func (o *GetIndexSearchBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuery(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetIndexSearchBody) validateQuery(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"query", "body", o.Query); err != nil {
		return err
	}

	if o.Query != nil {
		if err := o.Query.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "query")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetIndexSearchBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetIndexSearchBody) UnmarshalBinary(b []byte) error {
	var res GetIndexSearchBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetIndexSearchInternalServerErrorBody get index search internal server error body
//
// swagger:model GetIndexSearchInternalServerErrorBody
type GetIndexSearchInternalServerErrorBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get index search internal server error body
func (o *GetIndexSearchInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetIndexSearchInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetIndexSearchInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetIndexSearchInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetIndexSearchNotFoundBody get index search not found body
//
// swagger:model GetIndexSearchNotFoundBody
type GetIndexSearchNotFoundBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get index search not found body
func (o *GetIndexSearchNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetIndexSearchNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetIndexSearchNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetIndexSearchNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetIndexSearchOKBody get index search o k body
//
// swagger:model GetIndexSearchOKBody
type GetIndexSearchOKBody struct {

	// shards
	Shards *GetIndexSearchOKBodyShards `json:"_shards,omitempty"`

	// hits
	Hits *GetIndexSearchOKBodyHits `json:"hits,omitempty"`

	// timed out
	TimedOut bool `json:"timed_out,omitempty"`

	// took
	Took int64 `json:"took,omitempty"`
}

// Validate validates this get index search o k body
func (o *GetIndexSearchOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateShards(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHits(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetIndexSearchOKBody) validateShards(formats strfmt.Registry) error {

	if swag.IsZero(o.Shards) { // not required
		return nil
	}

	if o.Shards != nil {
		if err := o.Shards.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getIndexSearchOK" + "." + "_shards")
			}
			return err
		}
	}

	return nil
}

func (o *GetIndexSearchOKBody) validateHits(formats strfmt.Registry) error {

	if swag.IsZero(o.Hits) { // not required
		return nil
	}

	if o.Hits != nil {
		if err := o.Hits.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getIndexSearchOK" + "." + "hits")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetIndexSearchOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetIndexSearchOKBody) UnmarshalBinary(b []byte) error {
	var res GetIndexSearchOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetIndexSearchOKBodyHits get index search o k body hits
//
// swagger:model GetIndexSearchOKBodyHits
type GetIndexSearchOKBodyHits struct {

	// hits
	Hits []*GetIndexSearchOKBodyHitsHitsItems0 `json:"hits"`

	// max score
	MaxScore interface{} `json:"max_score,omitempty"`

	// total
	Total *GetIndexSearchOKBodyHitsTotal `json:"total,omitempty"`
}

// Validate validates this get index search o k body hits
func (o *GetIndexSearchOKBodyHits) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateHits(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTotal(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetIndexSearchOKBodyHits) validateHits(formats strfmt.Registry) error {

	if swag.IsZero(o.Hits) { // not required
		return nil
	}

	for i := 0; i < len(o.Hits); i++ {
		if swag.IsZero(o.Hits[i]) { // not required
			continue
		}

		if o.Hits[i] != nil {
			if err := o.Hits[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getIndexSearchOK" + "." + "hits" + "." + "hits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetIndexSearchOKBodyHits) validateTotal(formats strfmt.Registry) error {

	if swag.IsZero(o.Total) { // not required
		return nil
	}

	if o.Total != nil {
		if err := o.Total.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getIndexSearchOK" + "." + "hits" + "." + "total")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetIndexSearchOKBodyHits) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetIndexSearchOKBodyHits) UnmarshalBinary(b []byte) error {
	var res GetIndexSearchOKBodyHits
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetIndexSearchOKBodyHitsHitsItems0 get index search o k body hits hits items0
//
// swagger:model GetIndexSearchOKBodyHitsHitsItems0
type GetIndexSearchOKBodyHitsHitsItems0 struct {

	// id
	ID string `json:"_id,omitempty"`

	// index
	Index string `json:"_index,omitempty"`

	// score
	Score interface{} `json:"_score,omitempty"`

	// source
	Source *models.Document `json:"_source,omitempty"`

	// type
	Type string `json:"_type,omitempty"`

	// sort
	Sort []int64 `json:"sort"`
}

// Validate validates this get index search o k body hits hits items0
func (o *GetIndexSearchOKBodyHitsHitsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetIndexSearchOKBodyHitsHitsItems0) validateSource(formats strfmt.Registry) error {

	if swag.IsZero(o.Source) { // not required
		return nil
	}

	if o.Source != nil {
		if err := o.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_source")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetIndexSearchOKBodyHitsHitsItems0) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetIndexSearchOKBodyHitsHitsItems0) UnmarshalBinary(b []byte) error {
	var res GetIndexSearchOKBodyHitsHitsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetIndexSearchOKBodyHitsTotal get index search o k body hits total
//
// swagger:model GetIndexSearchOKBodyHitsTotal
type GetIndexSearchOKBodyHitsTotal struct {

	// relation
	Relation string `json:"relation,omitempty"`

	// total
	Total int64 `json:"total,omitempty"`
}

// Validate validates this get index search o k body hits total
func (o *GetIndexSearchOKBodyHitsTotal) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetIndexSearchOKBodyHitsTotal) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetIndexSearchOKBodyHitsTotal) UnmarshalBinary(b []byte) error {
	var res GetIndexSearchOKBodyHitsTotal
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetIndexSearchOKBodyShards get index search o k body shards
//
// swagger:model GetIndexSearchOKBodyShards
type GetIndexSearchOKBodyShards struct {

	// failed
	Failed int64 `json:"failed,omitempty"`

	// skipped
	Skipped int64 `json:"skipped,omitempty"`

	// successful
	Successful int64 `json:"successful,omitempty"`

	// total
	Total int64 `json:"total,omitempty"`
}

// Validate validates this get index search o k body shards
func (o *GetIndexSearchOKBodyShards) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetIndexSearchOKBodyShards) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetIndexSearchOKBodyShards) UnmarshalBinary(b []byte) error {
	var res GetIndexSearchOKBodyShards
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetIndexSearchParamsBodyQuery get index search params body query
//
// swagger:model GetIndexSearchParamsBodyQuery
type GetIndexSearchParamsBodyQuery struct {

	// bool
	// Required: true
	Bool *GetIndexSearchParamsBodyQueryBool `json:"bool"`
}

// Validate validates this get index search params body query
func (o *GetIndexSearchParamsBodyQuery) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBool(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetIndexSearchParamsBodyQuery) validateBool(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"query"+"."+"bool", "body", o.Bool); err != nil {
		return err
	}

	if o.Bool != nil {
		if err := o.Bool.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "query" + "." + "bool")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetIndexSearchParamsBodyQuery) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetIndexSearchParamsBodyQuery) UnmarshalBinary(b []byte) error {
	var res GetIndexSearchParamsBodyQuery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetIndexSearchParamsBodyQueryBool get index search params body query bool
//
// swagger:model GetIndexSearchParamsBodyQueryBool
type GetIndexSearchParamsBodyQueryBool struct {

	// filter
	Filter *GetIndexSearchParamsBodyQueryBoolFilter `json:"filter,omitempty"`

	// must
	Must *GetIndexSearchParamsBodyQueryBoolMust `json:"must,omitempty"`
}

// Validate validates this get index search params body query bool
func (o *GetIndexSearchParamsBodyQueryBool) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMust(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetIndexSearchParamsBodyQueryBool) validateFilter(formats strfmt.Registry) error {

	if swag.IsZero(o.Filter) { // not required
		return nil
	}

	if o.Filter != nil {
		if err := o.Filter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "query" + "." + "bool" + "." + "filter")
			}
			return err
		}
	}

	return nil
}

func (o *GetIndexSearchParamsBodyQueryBool) validateMust(formats strfmt.Registry) error {

	if swag.IsZero(o.Must) { // not required
		return nil
	}

	if o.Must != nil {
		if err := o.Must.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "query" + "." + "bool" + "." + "must")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetIndexSearchParamsBodyQueryBool) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetIndexSearchParamsBodyQueryBool) UnmarshalBinary(b []byte) error {
	var res GetIndexSearchParamsBodyQueryBool
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetIndexSearchParamsBodyQueryBoolFilter get index search params body query bool filter
//
// swagger:model GetIndexSearchParamsBodyQueryBoolFilter
type GetIndexSearchParamsBodyQueryBoolFilter struct {

	// terms
	// Required: true
	Terms *GetIndexSearchParamsBodyQueryBoolFilterTerms `json:"terms"`
}

// Validate validates this get index search params body query bool filter
func (o *GetIndexSearchParamsBodyQueryBoolFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTerms(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetIndexSearchParamsBodyQueryBoolFilter) validateTerms(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"query"+"."+"bool"+"."+"filter"+"."+"terms", "body", o.Terms); err != nil {
		return err
	}

	if o.Terms != nil {
		if err := o.Terms.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "query" + "." + "bool" + "." + "filter" + "." + "terms")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetIndexSearchParamsBodyQueryBoolFilter) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetIndexSearchParamsBodyQueryBoolFilter) UnmarshalBinary(b []byte) error {
	var res GetIndexSearchParamsBodyQueryBoolFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetIndexSearchParamsBodyQueryBoolFilterTerms get index search params body query bool filter terms
//
// swagger:model GetIndexSearchParamsBodyQueryBoolFilterTerms
type GetIndexSearchParamsBodyQueryBoolFilterTerms struct {

	// tags
	// Required: true
	Tags []string `json:"tags"`
}

// Validate validates this get index search params body query bool filter terms
func (o *GetIndexSearchParamsBodyQueryBoolFilterTerms) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetIndexSearchParamsBodyQueryBoolFilterTerms) validateTags(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"query"+"."+"bool"+"."+"filter"+"."+"terms"+"."+"tags", "body", o.Tags); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetIndexSearchParamsBodyQueryBoolFilterTerms) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetIndexSearchParamsBodyQueryBoolFilterTerms) UnmarshalBinary(b []byte) error {
	var res GetIndexSearchParamsBodyQueryBoolFilterTerms
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetIndexSearchParamsBodyQueryBoolMust get index search params body query bool must
//
// swagger:model GetIndexSearchParamsBodyQueryBoolMust
type GetIndexSearchParamsBodyQueryBoolMust struct {

	// match phrase
	// Required: true
	MatchPhrase *GetIndexSearchParamsBodyQueryBoolMustMatchPhrase `json:"match_phrase"`
}

// Validate validates this get index search params body query bool must
func (o *GetIndexSearchParamsBodyQueryBoolMust) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateMatchPhrase(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetIndexSearchParamsBodyQueryBoolMust) validateMatchPhrase(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"query"+"."+"bool"+"."+"must"+"."+"match_phrase", "body", o.MatchPhrase); err != nil {
		return err
	}

	if o.MatchPhrase != nil {
		if err := o.MatchPhrase.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "query" + "." + "bool" + "." + "must" + "." + "match_phrase")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetIndexSearchParamsBodyQueryBoolMust) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetIndexSearchParamsBodyQueryBoolMust) UnmarshalBinary(b []byte) error {
	var res GetIndexSearchParamsBodyQueryBoolMust
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetIndexSearchParamsBodyQueryBoolMustMatchPhrase get index search params body query bool must match phrase
//
// swagger:model GetIndexSearchParamsBodyQueryBoolMustMatchPhrase
type GetIndexSearchParamsBodyQueryBoolMustMatchPhrase struct {

	// content
	// Required: true
	Content *GetIndexSearchParamsBodyQueryBoolMustMatchPhraseContent `json:"content"`
}

// Validate validates this get index search params body query bool must match phrase
func (o *GetIndexSearchParamsBodyQueryBoolMustMatchPhrase) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetIndexSearchParamsBodyQueryBoolMustMatchPhrase) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"query"+"."+"bool"+"."+"must"+"."+"match_phrase"+"."+"content", "body", o.Content); err != nil {
		return err
	}

	if o.Content != nil {
		if err := o.Content.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "query" + "." + "bool" + "." + "must" + "." + "match_phrase" + "." + "content")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetIndexSearchParamsBodyQueryBoolMustMatchPhrase) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetIndexSearchParamsBodyQueryBoolMustMatchPhrase) UnmarshalBinary(b []byte) error {
	var res GetIndexSearchParamsBodyQueryBoolMustMatchPhrase
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetIndexSearchParamsBodyQueryBoolMustMatchPhraseContent get index search params body query bool must match phrase content
//
// swagger:model GetIndexSearchParamsBodyQueryBoolMustMatchPhraseContent
type GetIndexSearchParamsBodyQueryBoolMustMatchPhraseContent struct {

	// analyzer
	Analyzer string `json:"analyzer,omitempty"`

	// query
	// Required: true
	Query *string `json:"query"`
}

// Validate validates this get index search params body query bool must match phrase content
func (o *GetIndexSearchParamsBodyQueryBoolMustMatchPhraseContent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateQuery(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetIndexSearchParamsBodyQueryBoolMustMatchPhraseContent) validateQuery(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"query"+"."+"bool"+"."+"must"+"."+"match_phrase"+"."+"content"+"."+"query", "body", o.Query); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetIndexSearchParamsBodyQueryBoolMustMatchPhraseContent) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetIndexSearchParamsBodyQueryBoolMustMatchPhraseContent) UnmarshalBinary(b []byte) error {
	var res GetIndexSearchParamsBodyQueryBoolMustMatchPhraseContent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
