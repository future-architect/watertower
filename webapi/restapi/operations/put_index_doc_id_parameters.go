// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"

	"github.com/future-architect/watertower/webapi/models"
)

// NewPutIndexDocIDParams creates a new PutIndexDocIDParams object
// no default values defined in spec.
func NewPutIndexDocIDParams() PutIndexDocIDParams {

	return PutIndexDocIDParams{}
}

// PutIndexDocIDParams contains all the bound params for the put index doc id operation
// typically these are obtained from a http.Request
//
// swagger:parameters put-index-_doc-_id
type PutIndexDocIDParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Unique identifier of the document.
	  Required: true
	  In: path
	*/
	ID string
	/*
	  In: body
	*/
	Body *models.Document
	/*Name of the index that contains the document.
	  Required: true
	  In: path
	*/
	Index string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPutIndexDocIDParams() beforehand.
func (o *PutIndexDocIDParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	rID, rhkID, _ := route.Params.GetOK("_id")
	if err := o.bindID(rID, rhkID, route.Formats); err != nil {
		res = append(res, err)
	}

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body models.Document
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			res = append(res, errors.NewParseError("body", "body", "", err))
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.Body = &body
			}
		}
	}
	rIndex, rhkIndex, _ := route.Params.GetOK("index")
	if err := o.bindIndex(rIndex, rhkIndex, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindID binds and validates parameter ID from path.
func (o *PutIndexDocIDParams) bindID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.ID = raw

	return nil
}

// bindIndex binds and validates parameter Index from path.
func (o *PutIndexDocIDParams) bindIndex(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.Index = raw

	return nil
}
