// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetIndexSourceIDHandlerFunc turns a function with the right signature into a get index source id handler
type GetIndexSourceIDHandlerFunc func(GetIndexSourceIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetIndexSourceIDHandlerFunc) Handle(params GetIndexSourceIDParams) middleware.Responder {
	return fn(params)
}

// GetIndexSourceIDHandler interface for that can handle valid get index source id params
type GetIndexSourceIDHandler interface {
	Handle(GetIndexSourceIDParams) middleware.Responder
}

// NewGetIndexSourceID creates a new http.Handler for the get index source id operation
func NewGetIndexSourceID(ctx *middleware.Context, handler GetIndexSourceIDHandler) *GetIndexSourceID {
	return &GetIndexSourceID{Context: ctx, Handler: handler}
}

/*GetIndexSourceID swagger:route GET /{index}/_source/{_id} getIndexSourceId

Your GET endpoint

You use GET to retrieve just the document from a particular index.

*/
type GetIndexSourceID struct {
	Context *middleware.Context
	Handler GetIndexSourceIDHandler
}

func (o *GetIndexSourceID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetIndexSourceIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetIndexSourceIDBadRequestBody get index source ID bad request body
//
// swagger:model GetIndexSourceIDBadRequestBody
type GetIndexSourceIDBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get index source ID bad request body
func (o *GetIndexSourceIDBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetIndexSourceIDBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetIndexSourceIDBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetIndexSourceIDBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetIndexSourceIDNotFoundBody get index source ID not found body
//
// swagger:model GetIndexSourceIDNotFoundBody
type GetIndexSourceIDNotFoundBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get index source ID not found body
func (o *GetIndexSourceIDNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetIndexSourceIDNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetIndexSourceIDNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetIndexSourceIDNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
