// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/future-architect/watertower/webapi/models"
)

// GetIndexDocIDHandlerFunc turns a function with the right signature into a get index doc id handler
type GetIndexDocIDHandlerFunc func(GetIndexDocIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetIndexDocIDHandlerFunc) Handle(params GetIndexDocIDParams) middleware.Responder {
	return fn(params)
}

// GetIndexDocIDHandler interface for that can handle valid get index doc id params
type GetIndexDocIDHandler interface {
	Handle(GetIndexDocIDParams) middleware.Responder
}

// NewGetIndexDocID creates a new http.Handler for the get index doc id operation
func NewGetIndexDocID(ctx *middleware.Context, handler GetIndexDocIDHandler) *GetIndexDocID {
	return &GetIndexDocID{Context: ctx, Handler: handler}
}

/*GetIndexDocID swagger:route GET /{index}/_doc/{_id} getIndexDocId

Your GET endpoint

You use GET to retrieve a document and its source or stored fields from a particular index.

*/
type GetIndexDocID struct {
	Context *middleware.Context
	Handler GetIndexDocIDHandler
}

func (o *GetIndexDocID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetIndexDocIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetIndexDocIDBadRequestBody get index doc ID bad request body
//
// swagger:model GetIndexDocIDBadRequestBody
type GetIndexDocIDBadRequestBody struct {

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get index doc ID bad request body
func (o *GetIndexDocIDBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetIndexDocIDBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetIndexDocIDBadRequestBody) UnmarshalBinary(b []byte) error {
	var res GetIndexDocIDBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetIndexDocIDNotFoundBody get index doc ID not found body
//
// swagger:model GetIndexDocIDNotFoundBody
type GetIndexDocIDNotFoundBody struct {

	// id
	ID string `json:"_id,omitempty"`

	// index
	Index string `json:"_index,omitempty"`

	// primary term
	PrimaryTerm int64 `json:"_primary_term,omitempty"`

	// seq no
	SeqNo int64 `json:"_seq_no,omitempty"`

	// source
	Source interface{} `json:"_source,omitempty"`

	// type
	Type string `json:"_type,omitempty"`

	// version
	Version int64 `json:"_version,omitempty"`

	// found
	Found bool `json:"found,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this get index doc ID not found body
func (o *GetIndexDocIDNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetIndexDocIDNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetIndexDocIDNotFoundBody) UnmarshalBinary(b []byte) error {
	var res GetIndexDocIDNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// GetIndexDocIDOKBody get index doc ID o k body
//
// swagger:model GetIndexDocIDOKBody
type GetIndexDocIDOKBody struct {

	// id
	ID string `json:"_id,omitempty"`

	// index
	Index string `json:"_index,omitempty"`

	// primary term
	PrimaryTerm int64 `json:"_primary_term,omitempty"`

	// seq no
	SeqNo int64 `json:"_seq_no,omitempty"`

	// source
	Source *models.Document `json:"_source,omitempty"`

	// type
	Type string `json:"_type,omitempty"`

	// version
	Version int64 `json:"_version,omitempty"`

	// found
	Found bool `json:"found,omitempty"`
}

// Validate validates this get index doc ID o k body
func (o *GetIndexDocIDOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetIndexDocIDOKBody) validateSource(formats strfmt.Registry) error {

	if swag.IsZero(o.Source) { // not required
		return nil
	}

	if o.Source != nil {
		if err := o.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getIndexDocIdOK" + "." + "_source")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetIndexDocIDOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetIndexDocIDOKBody) UnmarshalBinary(b []byte) error {
	var res GetIndexDocIDOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
